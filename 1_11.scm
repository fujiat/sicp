(define (f n)
  (cond ((< n 3) n)
        (else (+ (f (- n 1)) (* (f (- n 2)) 2) (* (f (- n 3)) 3)))))
;;(f 5) -> 10 + 3 * 2 + 2 * 3
;;(+ (f 4) (* 2 (f 3)) (* 3 (f 2)))
;;   (f 4) -> 3 + 2 * 2 + 1 * 3 = 10
;;(+ (+ (f 3) (* 2 (f 2)) (* 3 (f 1))) (* 2 (f 3)) (* 3 (f 2)))
;;(f 3) -> 3 + 2 * 2 + 1 * 3
;;(+ (+ 3 4 3) 6 6)
;;(+ 10 6 6)
;;22

;;(f 6)
;;(+ (f 5) (* (f 4) 2) (* (f 3) 2))

(define (f2 n)
  (f2-iter 2 1 0 n))

(define (f2-iter a b c count)
  (cond ((= count 2) a)
        ((= count 1) b)
        ((= count 0) c)
        (else (f2-iter (+ a (* 2 b) (* 3 c))
                       a
                       b
                       (- count 1)))))
