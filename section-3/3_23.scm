(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-cdr! deque item))

(define (make-item value)
  (cons value (cons '() '())))

(define (next-item item) (cddr item))
(define (prev-item item) (cadr item))
(define (value-of-item item) (car item))

(define (set-next-item! item next)
  (set-cdr! (cdr item) next))

(define (set-prev-item! item prev)
  (set-car! (cdr item) prev))

(define (empty-deque? deque) (or (null? (front-ptr deque)) (null? (rear-ptr deque))))
(define (make-deque) (cons '() '()))

(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty deque" deque)
      (value-of-item (front-ptr deque))))

(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "REAR called with an empty deque" deque)
      (value-of-item (rear-ptr deque))))

(define (front-insert-deque! deque value)
  (let ((new-item (make-item value)))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-item)
           (set-rear-ptr! deque new-item)
           deque)
          (else
           (set-next-item! new-item (front-ptr deque))
           (set-front-ptr! deque new-item)
           deque))))

(define (rear-insert-deque! deque value)
  (let ((new-item (make-item value)))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-item)
           (set-rear-ptr! deque new-item)
           deque)
          (else
           (set-prev-item! new-item (rear-ptr deque))
           (set-next-item! (rear-ptr deque) new-item)
           (set-rear-ptr! deque new-item)
           deque))))

(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an empty deque" deque))
        ((eq? (front-ptr deque) (rear-ptr deque))
         (set-front-ptr! deque '())
         deque)
        (else
         (set-front-ptr! deque (next-item (front-ptr deque)))
         deque)))

(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an empty deque" deque))
        ((eq? (front-ptr deque) (rear-ptr deque))
         (set-rear-ptr! deque '())
         deque)
        (else
         (set-rear-ptr! deque (prev-item (rear-ptr deque)))
         deque)))

(define (print-deque deque)
  (define (print-iter item)
    (if (eq? item (rear-ptr deque))
        (cons (value-of-item item) '())
        (cons (value-of-item item) (print-iter (next-item item)))))
  (if (empty-deque? deque)
      '()
      (print-iter (front-ptr deque))))

(define q (make-deque))
(front-insert-deque! q 'a)
(rear-insert-deque! q 'b)
(print-deque q)
(rear-insert-deque! q 'c)
(front-insert-deque! q 'd)
(rear-delete-deque! q)
(front-delete-deque! q)
(empty-deque? q)
