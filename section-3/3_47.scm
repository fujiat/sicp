(define true #t)
(define false #f)

(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex 'acquire)
        (let ((val (apply p args)))
          (mutex 'release)
          val))
      serialized-p)))

(define (make-mutex)
  (let ((cell (list false)))            
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire))) ; retry
            ((eq? m 'release) (clear! cell))))
    the-mutex))

(define (clear! cell)
  (set-car! cell false))

(define (test-and-set! cell)
  (if (car cell)
      true
      (begin (set-car! cell true)
             false)))

;; a)
(define (make-semaphore n)
  (let ((the-mutex (make-mutex))
        (counter 0))
    (define (acquire)
      (the-mutex 'acquire)
      (if (< counter n)
          (begin (set! counter (+ counter 1))
                 (the-mutex 'release))
          (begin (the-mutex 'release)
                 (acquire)); retry
          ))
    (define (release)
      (the-mutex 'acquire)
      ;; error check
      (if (> counter 0)
          (set! counter (- counter 1))
          (error "This semaphore is not acquired yet"))
      (the-mutex 'release))
    (define (dispatch m)
      (cond ((eq? m 'acquire) (acquire))
            ((eq? m 'release) (release))
            (else (error "Unknown request -- MAKE-SEMAPHORE"
                         m))))
    dispatch))

;; b)
(define (make-semaphore n)
  (let ((cell (list false))
        (counter 0))
    (define (acquire)
      (if (test-and-set! cell)
          (acquire) ; retry
          (if (< counter n)
              (begin (set! counter (+ counter 1))
                     (clear! cell))
              (begin (clear! cell)
                     (acquire)))))
    (define (release)
      (if (test-and-set! cell)
          (release)
          (if (> counter 0)
              (begin (set! counter (- counter 1))
                     (clear! cell))
              (error "This semaphore is not acquired yet"))))
    (define (dispatch m)
      (cond ((eq? m 'acquire) (acquire))
            ((eq? m 'release) (release))
            (else (error "Unknown request -- MAKE-SEMAPHORE"
                         m))))
    dispatch))
